/********************************************************
*Desc : Global Event processor structs
*/

 
#define DIAL_MAXGE 4

/*************************************************
*Desc : Normally only the ProcessController will 
*		contact the GlobalEvent processor.
*		
*/
typedef struct
{
  struct Message	gd_Msg;				// standard Message
  UWORD				gd_InUse;			// If TRUE, this dialogue is in use
  ULONG				gd_Cmd;				// Command from guide/PC
  union
  {
	struct ScriptEventRecord **gl_LocEvList;	//ptr to local event list 
  } gd_Luggage;

} GEDIALOGUE;

#define EDC_NEWLOCALEVENTS	100			// process controller sends new local events
#define EDC_CLRLOCALEVENTS  101			// process controller wants the globeproc
										// to clr the local event list
#define EDC_USELOCALEVENTS  102

/********************************************
*Desc : used by the Event processor
*		Global events enter the system
*		as rawkey event.
*		A jumptable determines to which
*		ScriptNodeRecord the processcontroller
*		should jump after a this global event
*		has occured.
*/
typedef struct
{
  struct ScriptNodeRecord 
		*ej_LabelSNR;	// a copy of labelSNR in a ScriptEventRecord
  UWORD	ej_JumpRecType;

} EVENTJUMPREC;

typedef struct
{
  struct ScriptNodeRecord 
		*mj_LabelSNR;	// a copy of labelSNR in a ScriptEventRecord
  UWORD mj_JumpRecType;	

  int 	mj_X,
		mj_Y,
		mj_Width,
		mj_Height;

  char 	mj_RenderType;
  int 	mj_AudioCue;

  BOOL  mj_B_Used;
  UWORD mj_TypeBits;

  int	mj_keyCode, mj_rawkeyCode;

  TEXT	mj_assignment[50];	

} MOUSEJUMPREC;

#define JRT_KEYEVENT 		0
#define JRT_SCREENBUTTON 	1

// type bits
#define TB_NEXTPAGE 	1<<0		// button should be interpreted as jump to next page
#define TB_PREVPAGE 	1<<1		// button should be interpreted as jump to prev page

#define TB_ISGOTO		1<<2		// ADDED BY ERIK
#define TB_ISGOSUB		1<<3		// ADDED BY ERIK
#define TB_ISGOPREV		1<<4		// ADDED BY ERIK
#define TB_ISGONEXT		1<<5		// ADDED BY ERIK

/**********************************************
*Desc : data for geventint->geventtask communication
*		Signalmask indicates which signal should
*		be used for int to task signalling
*		Other cmds start from 100
*/
#define CBB_SETCLR  1<<31

#define CBB_MOUSE	1<<0				// if TRUE, use mousebuttons to 
										// move through the show. Default FALSE
#define CBB_CURSOR  1<<1				// if TRUE, use LEFT/RIGHT key to move
										// through the show. Default TRUE
#define CBB_ESCAPE  1<<2				// if TRUE, the ESCAPE key can be used
										// to exit from the show.
#define CBB_SHFTCRSR	1<<3			// if TRUE, the LEFT/RIGHT key will
										// have to be used with a shift key
										// pressed as well.	
typedef struct
{
  struct Task 		*ed_Task;			// ptr to task struct of gevent task
  ULONG 			ed_Sig_ItoGE;		// signal used for int->task message
  EVENTJUMPREC 		*ed_IE_GlobJumpList,// ptr to _IE_JumpList[], used in interrupt
					*ed_IE_LocJumpList;
  MOUSEJUMPREC		*ed_ME_LocJumpList;
  void		 		*ed_JumpRec;		// (->labelSNR) is a ptr to next ScriptNodeRecord
  int				ed_Cmd;				// Command to be generated by the GE for the PC
  ULONG				ed_ControlBits;
  BOOL				ed_B_LJLUsed;		// if TRUE, LocJumpList must be used 
  BOOL				ed_B_ProcessEvent;	// if TRUE, input events will be processed
  BOOL				ed_B_MouseOn;		// if TRUE, Mouse buttons should be used
										// to control button-interactivity
										// if FALSE, mouse buttons will be used
										// for NEXT-PREV page control
  int 				ed_MouseX,			// Current mouse x position
					ed_MouseY;			// Current mouse y pos
  struct IntuitionBase 
					*ed_IntuitionBase;
  struct GfxBase	*ed_GfxBase;
	struct Library	*ed_KeymapBase;
  APTR				miscPtr;
  MLSYSTEM			*mlsystem;
  APTR				temp1;				// temporary storage used by gp:input.c
  LONG				temp2;				// temporary storage used by gp:input.c
  ULONG				temp3[4];			// temporary storage used by gp:input.c
} EVENTDATA;

/*******************************************************
*Desc : used to pass data from the GE to the process controller
*/
typedef struct
{
  struct Message 	gd_Msg;				// standard message
  int				gd_Cmd;				// Cmd from the globalevent handler
  union
  {
	SNR  *gl_SNR;						// ptr to ScriptNodeRecord
	char *gl_Name;						// ptr to name of a ScriptNodeRecord
  } gd_Label;

} GEVENTDIALOGUE;

enum
{
  RCMDNONE, 				// no command, testing purposes
  RCMDJUMP,					// jump to the object 
  RCMDSTOPnJUMP,			// quit current active object, jump to next
  RCMDLABJUMP,				// as above but find a object with name first
  RCMDSTOPnLABJUMP,			// as above
  RCMDNEXTOBJ,				// jump/active next object, abort current object	
  RCMDPREVOBJ,				// jump/active previous object, abort current object	
  RCMDESCAPE,				// Escape from the current script
  RCMDESCAPE_SPECIAL,		// Escape from the current script - with alt/ctrl/esc
};

