
;--- math32bit.a --------------------------------------------------------+
; MediaPoint Fast Assembly Tools. Code written by B.O.M.B. AudioVisual   |
; Entertainment in order of 1001 Software Development.                   |
;------------------------------------------------------------------------+

; $VER: mediapoint/pascal/toolslib/math32bit.a 01.000 (02.04.94)


	TTL	math32bit.a
	IDNT	math32bit.a


	XDEF	Mulu32
	XDEF	Divs32




	SECTION	32BitMath,CODE


Mulu32	movem.l	d2-d4,-(sp)
	move.w	d1,d3
	move.w	d2,d4
	swap	d1
	swap	d2

	mulu	d3,d2
	mulu	d4,d1
	mulu	d4,d3

	add.w	d2,d1

	swap	d1
	clr.w	d1

	add.l	d3,d1
	movem.l	(sp)+,d2-d4
	rts





;-------------------------------------------------------------------------
; 32 bit signed integer division - developed by dr. Arthur Norman
;
; Divides 32-bit integer in D1 by 32-bit divisor in D2
; Returns 32-bit quotiënt in D1, rest in D2
;-------------------------------------------------------------------------

Divs32	tst.l	d2			; noemer < 0 ?
	bpl.s	.div00			; nee
	neg.l	d2			; maak noemer positief
	bsr.s	.div00			; delen alsof positief
	neg.l	d1			; antwoord nu negatief maken
	rts				; en terug

.div00	tst.l	d1			; teller < 0
	bpl.s	.divu			; beide operands positief
	neg.l	d1			; maak teller positief
	bsr.s	.divu			; voer deling uit
	neg.l	d1			; corrigeer teken quotiënt
	neg.l	d2			; corrigeer teken rest
	rts				; voltooid

.divu	cmpi.l	#$ffff,d2		; nagaan of D2H nul is
	bls.s	.divx			; D2 < 16, gebruik subroutine

	cmp.l	d1,d2			; nagaan of D2 <= D1
	beq.b	.div01			; D1=D2, eenvoudig geval
	bls.b	.div02			; moeilijk geval
; hier is D1 < D2, dus het resultaat is nul
	move.l	d1,d2			; rest correct maken
	moveq.l	#0,d1			; resultaat nul
	rts
; hier is D1 = D2, dus het resultaat is 1
.div01	moveq.l	#0,d2			; rest nul
	moveq.l	#1,d1			; resultaat 1
	rts

.div02	movem.l	d3-d5,-(sp)		; werkregisters wegzetten
	move.l	d2,d3			; noemer wegzetten
	clr.w	d3			; D3L leegmaken
	swap	d3			; D3 = D2 / $10000
	addq.l	#1,d3			; D3 = 1 + (D2 / $10000)
; schaalfactor in D7. teller en noemer schalen
	move.l	d1,d4			; D4 = teller
	move.l	d2,d5			; D5 = noemer
	move.l	d3,d2			; schaalfactor in D2 voor DIVX
	bsr.b	.divx			; D1 = D1 / schaalfactor
	move.l	d5,d2			; vervang noemer
	divu.w	d3,d2			; D2L = D2 / schaalfactor
; D2 moet nu in 16 bits passen
	divu.w	d2,d1			; deel geschaalde termen

	andi.l	#$ffff,d1		; D1H = 0
.div03	move.l	d5,d2			; oorspronkelijke noemer herstellen
	move.l	d5,d3			; ook in d3
	swap	d3			; D3L = D2H
	mulu.w	d1,d2			; D2 = D1 * D2L
	mulu.w	d1,d3			; D3 = D1 * D2H, D3H is nul
	swap	d3			; overbrengen naar meest sign. #
	add.l	d3,d2			; geef produkt; overdracht niet mog.
	sub.l	d4,d2			; oorspronkelijke teller aftrekken
	bhi.s	.div04			; te hoog, rest negatief
	neg.l	d2			; teken wijzigen
	cmp.l	d2,d5			; vergelijken met oorspr. noemer
	bhi.s	.div05			; goed, rest binnen limiet
	addq.l	#1,d1			; quotiënt vermeederen
	bra.s	.div03			; opnieuw proberen
.div04	subq.l	#1,d1			; quotiënt verminderen
	bra.s	.div03			; opnieuw proberen
; juist!
.div05	movem.l	(sp)+,d3-d5		; registers herstellen
	rts

.divx	movem.w	d1/d3,-(sp)		; D1L en D3L wegzetten
	clr.w	d1			; D1L leegmaken
	swap	d1			; D1 = D1H
	divu.w	d2,d1			; D1L = D1H / D2
	move.w	d1,d3			; gedeeltelijk resultaat wegzetten
	move.w	(sp)+,d1		; D1L ophalen
; D1H bevat D1H rest D2, D1L als bij betreden routine
	divu.w	d2,d1			; D1L = (D1L + (D1H rest D2)) / D2
	swap	d1			; D1L bevat nu rest
	moveq.l	#0,d2			; D2 leeghalen
	move.w	d1,d2			; rest naar d2
	move.w	d3,d1			; D1L = meest sign. quotiënt
	swap	d1			; verwisselen -> quotiënt 32 bits
	move.w	(sp)+,d3		; D3L herstellen
	rts				; klaar



;-- END OF FILE ----------------------------------------------------------
