
;--- antialias.a --------------------------------------------------------+
; MediaPoint AntiAliasing Routine. Code written by B.O.M.B. AudioVisual  |
; Entertainment in order of 1001 Software Development.                   |
;------------------------------------------------------------------------+
; DISCLAIMER: At the moment there is no guarantee that this code is 100% |
; correct and doesn't corrupt the system. Though much effort has been    |
; made to get it right, it's almost impossible to test for all possible  |
; situations. In fact, I may be totally out of my little mind !!         |
;------------------------------------------------------------------------+
; All programming by:                                                    |
;    Pascal Eeftinck, Bits On My Byte AudioVisual Entertainment          |
;------------------------------------------------------------------------+

; $VER: mediapoint/pascal/antialias.a 01.012 (10/12/93)


	TTL	antialias.a
	IDNT	antialias.a


	INCDIR "include:"

	INCLUDE	"exec/types.i"
	INCLUDE	"exec/funcdef.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"exec/exec_lib.i"
	INCLUDE	"exec/libraries.i"
	INCLUDE	"graphics/gfx.i"
	INCLUDE	"graphics/view.i"
	INCLUDE	"graphics/graphics_lib.i"

	INCDIR	"pascal:include/"

	INCLUDE	"macros.i"
	INCLUDE	"stackvars.i"
	INCLUDE	"antialias.i"


	XREF	_SysBase

	XREF	_GetRGB
	XREF	_GetPaletteSize

	XDEF	_AntiAlias
	XDEF	GetTrueRGB
	XDEF	GetBestPen


	SECTION	TEXT,CODE

;-------------------------------------------------------------------------
; func: VOID _AntiAlias( struct AntiAliasInfo * )
;-------------------------------------------------------------------------
; Text anti-aliasing for text editor & transitions
;-------------------------------------------------------------------------

  STACKSTRUCT
	_STRUCT	aA_CacheBytes,8
	_LABEL	aA_SIZEOF

_AntiAlias
;-------------------------------------------------------------------------
	link	a5,#aA_SIZEOF
	movem.l	d0-d7/a0-a6,-(sp)
;-------------------------------------------------------------------------
	move.l	_1stParam(a5),a4
	movea.l	aa_SrcBitMap(a4),a0
	move.w	bm_BytesPerRow(a0),d3
	lea.l	bm_Planes(a0),a1
	move.b	bm_Depth(a0),d2
	move.b	bm_Depth(a0),d1
	ext.w	d1
	subq.b	#1,d1

	moveq.l	#6,d7

	movea.l	aa_CacheL(a4),a0
	move.w	aa_CacheLineSize(a4),d0
	subq.w	#3,d0
	movea.l	aa_SrcMaskPlane(a4),a2

.loop11	moveq.l	#0,d4
	btst.b	d7,(a2,d3.w)
	beq.b	.skip11

	movem.l	d1/a1,-(sp)
.loop12	movea.l	(a1)+,a3
	btst.b	d7,(a3,d3.w)
	sne.b	d4
	ror.w	#1,d4
	dbra	d1,.loop12
	movem.l	(sp)+,d1/a1

	clr.b	d4
	rol.w	d2,d4
.skip11	move.b	d4,(a0)+

	subq.w	#1,d7
	bpl.b	.skip12
	moveq.l	#7,d7
	addq.l	#1,d3
.skip12	dbra	d0,.loop11
;-------------------------------------------------------------------------

	move.w	#1,aa_YPos(a4)

.loop	movea.l	aa_CacheU(a4),a0
	move.l	aa_CacheM(a4),aa_CacheU(a4)
	move.l	aa_CacheL(a4),aa_CacheM(a4)
	move.l	a0,aa_CacheL(a4)

;-------------------------------------------------------------------------
	movea.l	aa_SrcBitMap(a4),a0
	move.w	aa_YPos(a4),d3
	addq.w	#1,d3
	mulu.w	bm_BytesPerRow(a0),d3
	lea.l	bm_Planes(a0),a1
	moveq.l	#0,d2
	move.b	bm_Depth(a0),d2
	move.l	d2,d1
	subq.w	#1,d1

	moveq.l	#6,d7

	movem.l	d1/a1,-(sp)
.loop03	movea.l	(a1)+,a3
	move.b	(a3,d3.w),aA_CacheBytes(a5,d1.w)
	dbra	d1,.loop03
	movem.l	(sp)+,d1/a1

	movea.l	aa_CacheL(a4),a0
	move.w	aa_CacheLineSize(a4),d0
	subq.w	#3,d0
	movea.l	aa_SrcMaskPlane(a4),a2

.loop01	moveq.l	#0,d4
	btst.b	d7,(a2,d3.w)
	beq.b	.skip01

	move.w	d1,-(sp)
.loop02	btst.b	d7,aA_CacheBytes(a5,d1.w)
	sne.b	d4
	ror.w	#1,d4
	dbra	d1,.loop02
	move.w	(sp)+,d1

	clr.b	d4
	rol.w	d2,d4
.skip01	move.b	d4,(a0)+

	subq.w	#1,d7
	bpl.b	.skip02

	moveq.l	#7,d7
	addq.l	#1,d3
	movem.l	d1/a1,-(sp)
.loop04	movea.l	(a1)+,a3
	move.b	(a3,d3.w),aA_CacheBytes(a5,d1.w)
	dbra	d1,.loop04
	movem.l	(sp)+,d1/a1

.skip02	dbra	d0,.loop01
;-------------------------------------------------------------------------

;-------------------------------------------------------------------------
	movea.l	aa_CacheU(a4),a0
	movea.l	aa_CacheM(a4),a1
	movea.l	aa_CacheL(a4),a2
	movea.l	aa_ColorConversion(a4),a3
	movea.l	aa_Storage(a4),a6

.more	move.w	aa_CacheLineSize(a4),d2
	subq.w	#3,d2
	moveq.l	#1,d0
	move.b	(a3),d1
	beq.w	.noMore
;
; The program has 2 states one on and one off
; in the off state look for the next pixel to be on
; in the on state look for the next pixel to be off
;
; Note : Pixels below or above are not counted here
;

.rptX
	tst.b	1(a1,d0.w)		; starting with blank run
	beq.w	.noPxl

.found_off
;	tst.b	(a1,d0.w)
;	bne.w	.noPxl			; if it's a color, don't modify

; you found a blank pixel with the next one not blank
; modify this pixel
;
	moveq.l	#0,d3
	cmp.b	01(a2,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	00(a2,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	-1(a2,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	01(a1,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	-1(a1,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	01(a0,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	00(a0,d0.w),d1
	seq.b	d3
	lsl.w	#1,d3
	cmp.b	-1(a0,d0.w),d1
	seq.b	d3
	lsr.w	#7,d3

	move.b	.gTable(pc,d3.w),d3
	beq.b	.noPxl
	move.b	(a3,d3.w),(a6,d0.w)
	bra	.skip_on_run

.noPxl	addq.w	#1,d0
	dbra	d2,.rptX

	adda.w	#4,a3
	bra.w	.more

;
; You have just found a color now skip until you find a empty one
;
.skip_on_run:
	bra	.inrpSOR
.rpSOR
	cmp.b	(a2,d0.w),d1
	bne.b	.found_off
.inrpSOR
	addq.w	#1,d0
	dbra	d2,.rpSOR
	adda.w	#4,a3
	bra.w	.more

;-------------------------------------------------------------------------


.gTable	dc.b	0,0,0,1,0,0,1,2
	dc.b	0,1,2,2,1,2,2,3
	dc.b	0,1,2,2,1,2,2,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	0,0,1,2,0,1,2,2
	dc.b	1,2,2,3,2,2,3,3
	dc.b	1,2,2,3,2,2,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	0,1,2,2,1,2,2,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	1,2,2,3,2,2,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	0,0,1,2,0,1,2,2
	dc.b	1,2,2,3,2,2,3,3
	dc.b	1,2,2,3,2,2,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	0,1,2,2,1,2,2,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	1,2,2,3,2,2,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	2,3,3,3,3,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	2,2,3,3,2,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	3,3,3,3,3,3,3,3
	dc.b	3,3,3,3,3,3,3,3

.noMore	movea.l	aa_SrcBitMap(a4),a0
	lea.l	bm_Planes(a0),a1
	moveq.l	#0,d2
	move.b	bm_Depth(a0),d1
	subq.w	#1,d1
	move.w	bm_BytesPerRow(a0),d3
	mulu.w	aa_YPos(a4),d3

	moveq.l	#6,d7
	movea.l	aa_Storage(a4),a0
	move.w	aa_CacheLineSize(a4),d0
	subq.w	#3,d0

.loop21	move.b	(a0)+,d4
	beq.b	.skip22

	movem.l	d1/a1,-(sp)
.loop22	movea.l	(a1)+,a3
	lsr.b	#1,d4
	bcc.b	.skip20
	bset.b	d7,(a3,d3.l)
.skip20	dbra	d1,.loop22
	movem.l	(sp)+,d1/a1

	clr.b	-1(a0)
.skip22	subq.w	#1,d7
	bpl.b	.skip23
	moveq.l	#7,d7
	addq.l	#1,d3
.skip23	dbra	d0,.loop21
;-------------------------------------------------------------------------

	move.w	aa_YPos(a4),d0
	addq.w	#1,d0
	move.w	d0,aa_YPos(a4)
	cmp.w	aa_Height(a4),d0
	bne.w	.loop

;-------------------------------------------------------------------------
.xit	movem.l	(sp)+,d0-d7/a0-a6
	unlk	a5
	rts

;-------------------------------------------------------------------------






;-------------------------------------------------------------------------
; Local function - GetTrueRGB( ColorMap (a0), pen (d0), table (a1),
;	ViewModes (d1)
;-------------------------------------------------------------------------
; Retreives 32 bit color value. If under V39 then value is taken from
; a table and GetRGB4. If V39+ then GetRGB32 is used. Value is 32 bit left
; aligned for each color component, as documented in AutoDocs.
;-------------------------------------------------------------------------

GetTrueRGB
	movem.l	d0-d1/a0-a1,-(sp)
	andi.l	#V_EXTRA_HALFBRITE,d1
	beq.b	.cont
	cmpi.l	#31,d0
	bls.b	.cont
	andi.l	#31,d0
.cont	jsr	_GetRGB
	movem.l	(sp)+,d0-d1/a0-a1
	andi.l	#V_EXTRA_HALFBRITE,d1
	beq.b	.exit2
	cmpi.l	#31,d0
	bls.b	.exit2
	move.l	0(a1),d0
	lsr.l	#1,d0
	move.l	d0,0(a1)
	move.l	4(a1),d0
	lsr.l	#1,d0
	move.l	d0,4(a1)
	move.l	8(a1),d0
	lsr.l	#1,d0
	move.l	d0,8(a1)
.exit2	rts


;-------------------------------------------------------------------------
; Local function - ULONG pen = GetBestPen( ColorMap (a0), RGB32 (a1),
;	exclude (d0), max (d1), ViewModes (d2) )
;-------------------------------------------------------------------------
; Finds the pen that best suits the specified RGB32 values.
;-------------------------------------------------------------------------

GetBestPen
	link	a5,#-12
	movem.l	d1-d7/a0-a1,-(sp)

	moveq.l	#0,d3			; current color
	move.l	#256+256+256,d4		;
	moveq.l	#-1,d5			; best color

.loop00	cmp.w	d3,d0
	beq.b	.worse
	cmp.w	d3,d1
	bls.b	.exit

	movem.l	d1-d2,-(sp)
	movem.l	d0/a0-a1,-(sp)
	move.l	d3,d0
	move.l	d2,d1
	lea.l	-12(a5),a1
	bsr.w	GetTrueRGB
	movem.l	(sp)+,d0/a0-a1

 	moveq.l	#0,d7
 	moveq.l	#0,d1
 	moveq.l	#0,d2
	moveq.l	#0,d6
	move.b	-12(a5),d7
	move.b	-08(a5),d1
	move.b	-04(a5),d2

	move.b	00(a1),d6
	sub.w	d6,d7
	bpl.b	.pos_r
	neg.w	d7
.pos_r	move.b	04(a1),d6
	sub.w	d6,d1
	bpl.b	.pos_g
	neg.w	d1
.pos_g	move.b	08(a1),d6
	sub.w	d6,d2
	bpl.b	.pos_b
	neg.w	d2
.pos_b	add.w	d1,d7
	add.w	d2,d7
	movem.l	(sp)+,d1-d2
	cmp.w	d7,d4
	bls.b	.worse
	move.l	d3,d5		; set best color to current color
	move.w	d7,d4		; set best match to current match

.worse	addq.l	#1,d3
	bra.b	.loop00

.exit	move.l	d5,d0
	movem.l	(sp)+,d1-d7/a0-a1
	unlk	a5
	rts



;-------------------------------------------------------------------------
; automatical source and object module updating
;-------------------------------------------------------------------------

;	AUTO	u\
;	AUTO	wl pascal:antialias.o\y

;-- END OF FILE ----------------------------------------------------------

