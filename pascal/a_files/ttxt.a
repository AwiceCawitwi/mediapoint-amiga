
;--- ttxt.a -------------------------------------------------------------+
; MediaPoint Text Render Function. Code written by B.O.M.B. AudioVisual  |
; Entertainment in order of 1001 Software Development.                   |
;------------------------------------------------------------------------+
; DISCLAIMER: At the moment there is no guarantee that this code is 100% |
; correct and doesn't corrupt the system. Though much effort has been    |
; made to get it right, it's almost impossible to test for all possible  |
; situations. In fact, I may be totally out of my little mind !!         |
;------------------------------------------------------------------------+
; All programming by:                                                    |
;    Pascal Eeftinck, Bits On My Byte AudioVisual Entertainment          |
;------------------------------------------------------------------------+

; $VER: mediapoint/pascal/ttxt.a 01.003 (17/12/93)


	TTL	ttxt.a
	IDNT	ttxt.a


	INCDIR "include:"

	INCLUDE "exec/types.i"
	INCLUDE "exec/memory.i"
	INCLUDE "exec/funcdef.i"
	INCLUDE "exec/exec_lib.i"
	INCLUDE	"exec/libraries.i"
	INCLUDE	"exec/strings.i"
	INCLUDE "graphics/gfx.i"
	INCLUDE "graphics/text.i"
	INCLUDE	"graphics/rastport.i"
	INCLUDE "graphics/graphics_lib.i"
	INCLUDE "hardware/blit.i"

	INCDIR	"pascal:include/"

	INCLUDE	"ttxt.i"
	INCLUDE	"macros.i"
	INCLUDE	"textstyles.i"
	INCLUDE	"stackvars.i"
	INCLUDE	"editwindow.i"
	INCLUDE	"antialias.i"


	XDEF	_DrawText

	XREF	_AntiAlias
	XREF	GetAmountOfColors
	XREF	GetTrueRGB
	XREF	GetBestPen


AbsExecBase	EQU	$4


	SECTION	TEXT,CODE

;-------------------------------------------------------------------------
; function : VOID _DrawText( APTR TDInfo (a0) )
;-------------------------------------------------------------------------
; Uses information in structure to draw the specified line of text.
; When finished, text is rendered and ready to be blitted.
; Returned height of -1 indicates failure, 0 end of text.
;-------------------------------------------------------------------------

  STACKSTRUCT
	_UWORD	dt_BLTSIZEW
	_UWORD	dt_BLTAFWM
	_UWORD	dt_BLTALWM
	_UWORD	dt_addX
	_APTR	dt_maskPlane
	_UWORD	dt_dstXStart
	_UWORD	dt_charStart
	_UWORD	dt_correction
	_STRUCT	dt_shdwBM,bm_SIZEOF
	_STRUCT	dt_textBM,bm_SIZEOF
	_STRUCT	dt_maskBM,bm_SIZEOF
	_UWORD	dt_planesON
	_UBYTE	dt_sameColor
	_UBYTE	dt_prevColor
	_STRUCT	dt_aaInfo,aa_SIZEOF
	_STRUCT	dt_RGBtriplets,3*4*2
	_APTR	dt_editWindow
	_APTR	dt_org_a4
	_LABEL	dt_STACKSIZE

_DrawText
	link	a5,#dt_STACKSIZE
	movem.l	d0-d7/a0-a6,-(sp)

	move.l	a4,dt_org_a4(a5)
	movea.l	a0,a3
	movea.l	tdi_GfxBase(a3),a6
	movea.l	tdi_editWindow(a3),a4
	move.l	a4,dt_editWindow(a5)

	move.w	tdi_renderLine(a3),d0
	bsr.w	tdGetLineInfo
	tst.w	d3
	beq.b	.eotext
	tst.w	tdi_lineHeight(a3)
	bne.b	.skip00

.eotext	clr.w	tdi_resultHeight(a3)
	bra.w	.exit

.skip00	tst.w	tdi_resultWidth(a3)		; skip empty lines
	beq.w	.exit
	move.w	ew_Height(a4),d1
	sub.w	ew_TopMargin(a4),d1
	sub.w	ew_BottomMargin(a4),d1
	bmi.w	.error
	move.w	tdi_dstYPos(a3),d0
	sub.w	ew_Y(a4),d0
	move.w	ew_Height(a4),d1
	sub.w	ew_BottomMargin(a4),d1
	sub.w	d0,d1
	cmp.w	tdi_resultHeight(a3),d1
	blt.w	.error

;------------------------ initializations -------------------------
	movem.l	a1,-(sp)
	movea.l	tdi_dstBitMap(a3),a0
	move.b	bm_Depth(a0),d0		; Depth = dstBM.Depth
	ext.w	d0
	move.w	tdi_resultHeight(a3),d2
	addq.w	#2,d2
	move.w	ew_Width(a4),d1
	add.w	tdi_lineHeight(a3),d1
	addq.w	#2,d1
	move.w	d1,d4
	add.w	#15,d4
	lsr.w	#3,d4
	andi.w	#$FFFE,d4
	move.w	d4,d5
	mulu.w	d2,d5			; * rows = planesize
	addq.w	#2,d0			; add 2 planes for mask
	mulu.w	d0,d4			; * planes
	subq.w	#2,d0			; and correct # planes
	mulu.w	d2,d4			; * rows
	cmp.l	tdi_chipSize(a3),d4
	bhi.w	.error

	movem.w	d1,-(sp)
	lea.l	dt_textBM(a5),a0
	CALLLIB	_LVOInitBitMap
	movem.w	(sp)+,d1

	moveq.l	#2,d0			; Depth = 2
	lea.l	dt_maskBM(a5),a0
	CALLLIB	_LVOInitBitMap

	move.l	tdi_chipMem(a3),d0
	beq.w	.error

	lea.l	dt_maskBM(a5),a0
	move.l	d0,bm_Planes+0(a0)
	move.l	d0,dt_maskPlane(a5)
	add.l	d5,d0
	move.l	d0,bm_Planes+4(a0)
	add.l	d5,d0

	move.l	d5,-(sp)
	move.l	bm_Planes+4(a0),a0
	lsr.w	#1,d5
	subq.w	#1,d5
.loop01	clr.w	(a0)+
	dbra	d5,.loop01
	move.l	(sp)+,d5

	lea.l	dt_textBM(a5),a0
	lea.l	bm_Planes(a0),a1
	move.b	bm_Depth(a0),d1
	ext.w	d1
	subq.w	#1,d1
.loop00	move.l	d0,(a1)+
	add.l	d5,d0
	dbra	d1,.loop00

	movea.l	tdi_dstRPort(a3),a1
	movea.l	tdi_dstBitMap(a3),a0
	move.l	a0,rp_BitMap(a1)

	movea.l	tdi_txtRPort(a3),a1
	lea.l	dt_textBM(a5),a0
	move.l	a0,rp_BitMap(a1)
	movem.l	(sp)+,a1
;------------------------------------------------------------------


	move.w	ew_LeftMargin(a4),d0
	cmp.b	#JUSTIFICATION_LEFT,ew_justification(a4)
	beq.b	.dotext
	move.w	ew_Width(a4),d0
	sub.w	ew_RightMargin(a4),d0
	move.w	tdi_resultWidth(a3),d1
	cmp.b	#JUSTIFICATION_RIGHT,ew_justification(a4)
	beq.b	.justRI
.justCE	sub.w	ew_LeftMargin(a4),d0
	lsr.w	#1,d0
	add.w	ew_LeftMargin(a4),d0
	lsr.w	#1,d1
.justRI	sub.w	d1,d0

.dotext	bsr.w	tdText

.exit	movem.l	(sp)+,d0-d7/a0-a6
	unlk	a5
	rts

.error	move.w	#-1,tdi_resultHeight(a3)
	bra.b	.exit
;----------------------------------------------------------------------------


; VOID tdText( (APTR) TEInfo (a3), (APTR) charStart (a1),
;	(UWORD) dstX (d0), (UWORD) nxtLineOff (d3), (APTR) EditWindow (a4)

tdText	movem.l	d1/d3/d5,-(sp)

	lea.l	dt_textBM(a5),a2
	clr.b	dt_planesON(a5)
	move.b	#TRUE,dt_sameColor(a5)

	movem.l	d0/d3/a1,-(sp)
	movea.l	tdi_txtRPort(a3),a1
 	moveq.l	#0,d0
	CALLLIB	_LVOSetAPen
	movea.l	tdi_txtRPort(a3),a1
	moveq.l	#1,d0
	moveq.l	#1,d1
	move.w	ew_Width(a4),d2
	move.w	d1,d3
	move.w	tdi_resultHeight(a3),d3
	CALLLIB	_LVORectFill
	movem.l	(sp)+,d0/d3/a1

	move.b	tdc_charColor(a1),dt_prevColor(a5)

	moveq.l	#0,d7			; we start at plane 0

	movem.l	d0-d1/a1,-(sp)
	CALLLIB	_LVOWaitBlit		; solve potential blitter problems
	movem.l	(sp)+,d0-d1/a1

NextPlane
	movem.l	d0-d1/d3/a1,-(sp)
	lea.l	-tdc_SIZE(a1),a1
	moveq.l	#0,d2			; first character of line

NextCH	cmp.w	d2,d3
	bls.w	Drawed

	lea.l	tdc_SIZE(a1),a1
	addq.w	#tdc_SIZE,d2
	tst.b	tdc_charCode(a1)
	beq.w	Drawed
	movea.l	tdc_charFont(a1),a0

.offset	moveq.l	#0,d6
	move.b	tdc_charCode(a1),d6
	move.b	tf_LoChar(a0),d4
	move.b	tf_HiChar(a0),d5
	cmp.b	d6,d4			; if LoChar > char
	bhi.b	.otble1
	cmp.b	d5,d6			; if char > HiChar
	bhi.b	.otble1
.itble1	sub.b	d4,d6			; char -= LoChar
	bra.b	.ofsdne
.otble1	sub.b	d4,d5
	addq.b	#1,d5
	move.b	d5,d6			; corrected character

.ofsdne	move.l	a3,-(sp)
	lsl.w	#1,d6

	move.w	d0,dt_charStart(a5)

	btst.b	#FPB_PROPORTIONAL,tf_Flags(a0)
	bne.b	.prop

.fixed	move.w	tf_XSize(a0),dt_addX(a5)
	movea.l	tf_CharKern(a0),a3
	cmpa.w	#0,a3
	beq.b	.both
	move.w	(a3,d6.w),d1
	add.w	d1,d0			; increase destx
	sub.w	d1,dt_addX(a5)
	bra.b	.both

.prop	movea.l	tf_CharKern(a0),a3
	cmpa.w	#0,a3
	beq.b	.skip00
	add.w	(a3,d6.w),d0		; increase destx
.skip00	movea.l	tf_CharSpace(a0),a3
	cmpa.w	#0,a3
	bne.b	.skip01
	move.w	tf_XSize(a0),dt_addX(a5)
	bra.b	.both
.skip01	move.w	(a3,d6.w),d4
	move.w	d4,dt_addX(a5)

.both	clr.w	dt_correction(a5)
	tst.w	d0
	bpl.b	.skip40
	neg.w	d0
	move.w	d0,dt_correction(a5)
	moveq.l	#0,d0
.skip40	lsl.w	#1,d6
	movea.l	tf_CharLoc(a0),a3
	move.w	0(a3,d6.w),d4		; charOffset
	add.w	dt_correction(a5),d4
	move.w	2(a3,d6.w),d5		; charBitWidth
	sub.w	dt_correction(a5),d5

	movea.l	(sp)+,a3
	beq.w	incPos			; if width 0, no display
	bmi.w	incPos

.tstdis	cmp.b	#31,tdc_charCode(a1)	; skip display of control codes
	bls.w	incPos

; test whether this character needs to be placed into the plane
	btst.b	d7,tdc_charColor(a1)
	beq.w	emptySp			; not even underlined

	movem.l	d0-d3/a3-a4,-(sp)
	move.b	tdc_charColor(a1),d6
	or.b	d6,dt_planesON(a5)
	cmp.b	dt_prevColor(a5),d6
	beq.b	.skip99

	move.b	#FALSE,dt_sameColor(a5)

.skip99	addq.w	#1,d0
	clr.w	dt_dstXStart(a5)

	btst.b	#MFSB_ITALIC,tdc_charStyle+1(a1)
	beq.b	.no_cor
	btst.b	#FSB_ITALIC,tf_Style(a0)
	bne.b	.no_cor

	move.w	tf_YSize(a0),d6
	sub.w	tf_Baseline(a0),d6
	neg.w	d6
	muls.w	ew_slantValue(a4),d6
	divs.w	ew_slantAmount(a4),d6
	add.w	d6,d0

	move.w	d0,dt_dstXStart(a5)
	bpl.b	.no_cor

	move.w	d0,d6
	move.w	bm_BytesPerRow(a2),d0
	cmpi.w	#38,LIB_VERSION(a6)
	bls.b	.nc002
	IsInterleaved	a2,a4
	bhi.b	.nc002

	ext.w	d0
	moveq.l	#0,d2
	move.b	bm_Depth(a2),d2
	divu.w	d2,d0
.nc002	lsl.w	#3,d0
	add.w	d6,d0

.no_cor	move.w	d7,d6
	lsl.w	#2,d6
	movea.l	bm_Planes(a2,d6.w),a4

	move.w	tdi_baseLine(a3),d6
	add.w	tf_YSize(a0),d6
	sub.w	tf_Baseline(a0),d6
	tst.w	dt_dstXStart(a5)
	bpl.b	.nc001
	subq.w	#1,d6
.nc001	mulu.w	bm_BytesPerRow(a2),d6
	adda.l	d6,a4
	move.w	d0,d6
	andi.w	#$FFF0,d6
	lsr.w	#3,d6
	adda.w	d6,a4

	movea.l	tf_CharData(a0),a3
	move.w	tf_YSize(a0),d6
	subq.w	#1,d6
	mulu.w	tf_Modulo(a0),d6
	adda.l	d6,a3
	move.w	d4,d6
	andi.w	#$FFF0,d6
	lsr.w	#3,d6
	adda.w	d6,a3

	andi.w	#$000F,d4
	move.w	d4,d3
	andi.w	#$000F,d0
	cmp.w	d0,d3
	bls.b	.setval
	suba.w	#2,a4
	sub.w	d0,d3
	moveq.l	#16,d0
.setval	sub.w	d3,d0
	andi.w	#%00001111,d0

	move.w	d4,d2
	lsl.w	#1,d2
	move.w	maskFWM(pc,d2.w),dt_BLTAFWM(a5)
	add.w	d5,d2
	add.w	d5,d2
	andi.w	#%00011110,d2
	move.w	maskLWM(pc,d2.w),dt_BLTALWM(a5)

	add.w	d5,d4
	addi.w	#15,d4
	lsr.w	#4,d4
	move.w	d4,dt_BLTSIZEW(a5)
	subi.w	#1,dt_BLTSIZEW(a5)

	lsl.w	#1,d4
	move.w	d4,d5
	add.w	tf_Modulo(a0),d4
	add.w	bm_BytesPerRow(a2),d5

	move.w	tf_YSize(a0),d1
	subq.w	#1,d1

	tst.w	tdc_charStyle(a1)
	beq.w	tdBlitCharNormal
	bra.w	tdBlitCharSpecial

maskFWM	dc.w	$ffff,$7fff,$3fff,$1fff,$0fff,$07ff,$03ff,$01ff
	dc.w	$00ff,$007f,$003f,$001f,$000f,$0007,$0003,$0001
maskLWM	dc.w	$ffff,$8000,$c000,$e000,$f000,$f800,$fc00,$fe00
	dc.w	$ff00,$ff80,$ffc0,$ffe0,$fff0,$fff8,$fffc,$fffe

;-------------------------------------------------------------------------
; the 'blit' functions returns at this label
;-------------------------------------------------------------------------
endBlit	movem.l	(sp)+,d0-d3/a3-a4

incPos	add.w	dt_addX(a5),d0
	add.w	ew_xSpacing(a4),d0

	btst.b	#MFSB_BOLD,tdc_charStyle+1(a1)
	beq.b	.nobold
	btst.b	#FSB_BOLD,tf_Style(a0)
	bne.b	.nobold
	add.w	tf_BoldSmear(a0),d0
.nobold	btst.b	#MFSB_UNDERLINED,tdc_charStyle+1(a1)
	beq.w	NextCH
	btst.b	#FSB_UNDERLINED,tf_Style(a0)
	bne.w	NextCH
	btst.b	d7,tdc_charColor(a1)
	beq.w	NextCH
	cmp.b	#31,tdc_charCode(a1)
	bls.w	NextCH

; the code below fills up the space under the character with an underline
; note: for now, no space is maintained between characters and underline

	move.b	tdc_charColor(a1),d4
	or.b	d4,dt_planesON(a5)
	cmp.b	dt_prevColor(a5),d4
	beq.b	.skip99

	move.b	#FALSE,dt_sameColor(a5)

.skip99	move.w	dt_charStart(a5),d4		; for underline drawing

	movem.l	d1-d3/a1,-(sp)

	move.w	d7,d1
	lsl.w	#2,d1
	movea.l	bm_Planes(a2,d1.w),a1
	move.w	tdi_baseLine(a3),d1
	addq.w	#2,d1
	add.w	ew_underLineOffset(a4),d1
	mulu.w	bm_BytesPerRow(a2),d1
	adda.w	d1,a1
	move.w	d4,d6
	lsr.w	#3,d6
	adda.w	d6,a1

	moveq.l	#7,d3
	move.w	d4,d1
	andi.w	#%00000111,d1
	sub.w	d1,d3

	move.w	ew_underLineHeight(a4),d2

	move.w	tdi_lineHeight(a3),d5
	add.w	ew_ySpacing(a4),d5
	sub.w	tdi_baseLine(a3),d5
	sub.w	ew_underLineOffset(a4),d5

	cmp.w	d2,d5
	bhi.b	.under
	move.w	d5,d2

.under	movem.l	d3/d4/a1,-(sp)
.underl	bset.b	d3,(a1)
	subq.w	#1,d3
	bpl.b	.skip03
	moveq.l	#7,d3
	adda.w	#1,a1
.skip03	addq.w	#1,d4
	cmp.w	d0,d4
	bls.b	.underl
	movem.l	(sp)+,d3/d4/a1
	adda.w	bm_BytesPerRow(a2),a1
	subq.w	#1,d2
	cmp.w	#1,d2
	bge.b	.under

.skip04	movem.l	(sp)+,d1-d3/a1
	bra.w	NextCH



emptySp	add.w	dt_addX(a5),d0
	add.w	ew_xSpacing(a4),d0
	btst.b	#MFSB_BOLD,tdc_charStyle+1(a1)
	beq.w	NextCH
	btst.b	#FSB_BOLD,tf_Style(a0)
	bne.w	NextCH
	add.w	tf_BoldSmear(a0),d0
	bra.w	NextCH

Drawed	movem.l	(sp)+,d0-d1/d3/a1
	addq.w	#1,d7
	cmp.b	bm_Depth(a2),d7
	bne.w	NextPlane

	tst.b	ew_antiAliasLevel(a4)
	beq.w	noAntiAlias

	lea.l	dt_textBM(a5),a2
	bsr.w	tdCreateMask

	movem.l	d0-d7/a0-a4,-(sp)
	moveq.l	#0,d0
	move.w	ew_Width(a4),d0
	addq.w	#2,d0
	lsl.w	#2,d0
	moveq.l	#0,d1
	move.w	tdi_lineHeight(a3),dt_aaInfo+aa_Height(a5)
	move.l	dt_maskPlane(a5),dt_aaInfo+aa_SrcMaskPlane(a5)
	lea.l	dt_textBM(a5),a0
	move.l	a0,dt_aaInfo+aa_SrcBitMap(a5)
	move.b	bm_Depth(a0),d1
	moveq.l	#4,d2
	lsl.l	d1,d2
	add.l	d2,d0
	addq.l	#4,d0
	move.l	d0,dt_aaInfo+aa_DataSize(a5)
	move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1

	move.l	a1,-(sp)
	LINKLIB	_LVOAllocMem,AbsExecBase
	move.l	(sp)+,a1
	move.l	d0,dt_aaInfo+aa_Data(a5)
	beq.w	.exit

.Init	move.w	ew_Width(a4),d0
	addq.w	#2,d0
	move.w	d0,dt_aaInfo+aa_CacheLineSize(a5)
	movea.l	dt_aaInfo+aa_Data(a5),a0
	adda.w	#1,a0
	move.l	a0,dt_aaInfo+aa_CacheU(a5)
	adda.w	d0,a0
	move.l	a0,dt_aaInfo+aa_CacheM(a5)
	adda.w	d0,a0
	move.l	a0,dt_aaInfo+aa_CacheL(a5)
	adda.w	d0,a0
	move.l	a0,dt_aaInfo+aa_Storage(a5)
	adda.w	d0,a0
	suba.w	#1,a0
	move.l	a0,dt_aaInfo+aa_ColorConversion(a5)
	move.l	tdi_viewModes(a3),dt_aaInfo+aa_ViewModes(a5)
	lea.l	dt_aaInfo(a5),a0
	jsr	GetAmountOfColors

	moveq.l	#0,d2
.loop00	cmp.w	d2,d3
	bls.w	.lpend
	movem.l	d2/d3/a1,-(sp)

	movea.l	dt_aaInfo+aa_ColorConversion(a5),a2

	cmp.b	#31,tdc_charCode(a1,d2.w)	
	bls.w	.skip05

.loop01	move.b	(a2),d0
	beq.b	.skip03
	cmp.b	tdc_charColor(a1,d2.w),d0
	beq.w	.skip05
	adda.w	#4,a2
	bra.b	.loop01

.skip03	movea.l	tdi_colorMap(a3),a0
	moveq.l	#0,d0
	move.b	tdc_charColor(a1,d2.w),d0
	move.b	d0,(a2)+

	lea.l	dt_RGBtriplets(a5),a1
	move.l	dt_aaInfo+aa_ViewModes(a5),d1
	move.l	d1,d2
	move.l	d1,-(sp)
	jsr	GetTrueRGB
	move.l	(sp)+,d1

	moveq.l	#0,d0
	cmp.w	#1,ew_BackFillType(a4)
	bne.b	.doIt
	move.w	ew_BackFillColor(a4),d0

.doIt	lea.l	dt_RGBtriplets+(3*4)(a5),a1
	jsr	GetTrueRGB

	moveq.l	#0,d4
	moveq.l	#0,d5
	moveq.l	#0,d6
	moveq.l	#0,d7
	lea.l	dt_RGBtriplets(a5),a1
	move.w	0(a1),d4
	move.w	4(a1),d5
	move.w	8(a1),d6
	move.w	(3*4)+0(a1),d7
	sub.l	d7,d4
	move.w	(3*4)+4(a1),d7
	sub.l	d7,d5
	move.w	(3*4)+8(a1),d7
	sub.l	d7,d6

	asr.l	#2,d4
	asr.l	#2,d5
	asr.l	#2,d6

	move.l	0+(3*4)(a1),0(a1)
	move.l	4+(3*4)(a1),4(a1)
	move.l	8+(3*4)(a1),8(a1)

	add.w	d4,0(a1)
	add.w	d5,4(a1)
	add.w	d6,8(a1)

	move.b	-1(a2),d0
	move.l	dt_aaInfo+aa_PaletteSize(a5),d1

	move.l	d0,-(sp)
	jsr	GetBestPen
	move.b	d0,(a2)+
*	or.b	d0,dt_planesON(a5)
	move.l	(sp)+,d0

	add.w	d4,0(a1)
	add.w	d5,4(a1)
	add.w	d6,8(a1)

	move.l	d0,-(sp)
	jsr	GetBestPen
	move.b	d0,(a2)+
*	or.b	d0,dt_planesON(a5)
	move.l	(sp)+,d0

	add.w	d4,0(a1)
	add.w	d5,4(a1)
	add.w	d6,8(a1)

	move.l	d0,-(sp)
	jsr	GetBestPen
	move.b	d0,(a2)+
*	or.b	d0,dt_planesON(a5)
	move.l	(sp)+,d0

.skip05	movem.l	(sp)+,d2/d3/a1
	addq.w	#tdc_SIZE,d2
	bra.w	.loop00

.lpend	pea.l	dt_aaInfo(a5)
	jsr	_AntiAlias
	lea.l	4(sp),sp

.free	movea.l	dt_aaInfo+aa_Data(a5),a1
	move.l	dt_aaInfo+aa_DataSize(a5),d0
	LINKLIB	_LVOFreeMem,AbsExecBase
.exit	movem.l	(sp)+,d0-d7/a0-a4

noAntiAlias
	lea.l	dt_textBM(a5),a2
	bsr.w	tdCreateMask

	tst.b	ew_shadowType(a4)
	beq.w	tdShadowTypeNormal

	lea.l	dt_maskBM(a5),a0
	lea.l	dt_shdwBM(a5),a1
	moveq.l	#bm_SIZEOF-1,d0
.loop10	move.b	(a0)+,(a1)+
	dbra	d0,.loop10

	lea.l	dt_shdwBM(a5),a0
	lea.l	dt_maskBM(a5),a1
	lea.l	bm_Planes(a0),a2
	move.l	0(a2),d0
	move.l	4(a2),d1
	moveq.l	#0,d6			; clear bitcounter
	moveq.l	#0,d7			; clear planecounter
	lea.l	dt_textBM(a5),a1
	move.b	bm_Depth(a1),d7
	move.b	d7,bm_Depth(a0)

.loop40	move.w	ew_BackFillColor+01(a4),d5

	cmp.b	#SHADOWTYPE_TRANSPARENT,ew_shadowType(a4)
	beq.b	.skip44

	move.b	ew_shadowPen(a4),d5
	ext.w	d5
;	btst.l	d6,d5
;	beq.b	.clrpl
;	bra.b	.mskpl

.skip44	btst.l	d6,d5
	beq.b	.clrpl

.mskpl	move.l	d0,(a2)+		; set mask plane
	bra.b	.skip42
.clrpl	move.l	d1,(a2)+		; set cleared plane
.skip42
	addq.w	#1,d6			; increase bitcounter
	cmp.w	d6,d7			; last of planes?
	bhi.b	.loop40			; if not, repeat

	cmp.b	#SHADOWTYPE_CAST,ew_shadowType(a4)
	beq.w	tdShadowTypeCast
	cmp.b	#SHADOWTYPE_SOLID,ew_shadowType(a4)
	beq.w	tdShadowTypeSolid
	cmp.b	#SHADOWTYPE_OUTLINE,ew_shadowType(a4)
	beq.w	tdShadowTypeOutline
	cmp.b	#SHADOWTYPE_TRANSPARENT,ew_shadowType(a4)
	beq.w	tdShadowTypeTransparent
	bra.b	tdShadowTypeNormal

txt_xit	movem.l	(sp)+,d1/d3/d5
	rts


tdShadowTypeNormal
	lea.l	dt_textBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4		; size x
	move.w	tdi_lineHeight(a3),d5	; size y
	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	CALLLIB	_LVOBltMaskBitMapRastPort
	bra.w	txt_xit


tdShadowTypeCast
	lea.l	teDirectionTable(pc),a2
	move.b	ew_shadowDirection(a4),d7
	ext.w	d7
	lsl.w	#2,d7
	lea.l	(a2,d7.w),a2

	move.b	ew_shadowDepth(a4),d6
	ext.w	d6
	addq.w	#1,d6

	lea.l	dt_shdwBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4
	sub.w	d6,d4			; size x
	move.w	tdi_lineHeight(a3),d5	; size y

.xoff1	tst.w	0(a2)
	beq.b	.yoff1
	bmi.b	.xoff1n

.xoff1p	add.w	d6,d2
	bra.b	.yoff1

.xoff1n	add.w	d6,d0


.yoff1	tst.w	2(a2)
	beq.b	.blit1
	bmi.b	.yoff1n

.yoff1p	add.w	d6,d3
	bra.b	.blit1

.yoff1n	move.w	d0,-(sp)
	move.b	ew_shadowDepth(a4),d0
	ext.w	d0
	add.w	d0,d3
	sub.w	d6,d3
	move.w	(sp)+,d0


.blit1	movem.l	d6/a2,-(sp)
	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	CALLLIB	_LVOBltMaskBitMapRastPort
	movem.l	(sp)+,d6/a2

	lea.l	dt_textBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4		; size x
	move.w	tdi_lineHeight(a3),d5	; size y

	tst.w	2(a2)
	bge.b	.blit2
	move.b	ew_shadowDepth(a4),d7
	ext.w	d7
	add.w	d7,d3
	
.blit2	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	CALLLIB	_LVOBltMaskBitMapRastPort
	bra.w	txt_xit


tdShadowTypeSolid
	lea.l	teDirectionTable(pc),a2
	move.b	ew_shadowDirection(a4),d7
	ext.w	d7
	lsl.w	#2,d7
	lea.l	(a2,d7.w),a2

	move.b	ew_shadowDepth(a4),d7
	ext.w	d7
	moveq.l	#1,d6

.loop	lea.l	dt_shdwBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4
	sub.w	d6,d4			; size x
	move.w	tdi_lineHeight(a3),d5	; size y

.xoff1	tst.w	0(a2)
	beq.b	.yoff1
	bmi.b	.xoff1n

.xoff1p	add.w	d6,d2
	bra.b	.yoff1

.xoff1n	add.w	d6,d0


.yoff1	tst.w	2(a2)
	beq.b	.blit1
	bmi.b	.yoff1n

.yoff1p	add.w	d6,d3
	bra.b	.blit1

.yoff1n	move.w	d0,-(sp)
	move.b	ew_shadowDepth(a4),d0
	ext.w	d0
	add.w	d0,d3
	sub.w	d6,d3
	move.w	(sp)+,d0


.blit1	movem.l	d6/a2,-(sp)
	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	CALLLIB	_LVOBltMaskBitMapRastPort
	movem.l	(sp)+,d6/a2

	addq.w	#1,d6
	dbra	d7,.loop

	lea.l	dt_textBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4		; size x
	move.w	tdi_lineHeight(a3),d5	; size y

	tst.w	2(a2)
	bge.b	.blit2
	move.b	ew_shadowDepth(a4),d7
	ext.w	d7
	add.w	d7,d3
	
.blit2	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	CALLLIB	_LVOBltMaskBitMapRastPort
	bra.w	txt_xit


tdShadowTypeOutline
	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	move.w	tdi_lineHeight(a3),d5	; size y

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d0
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d2
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d0
	addq.w	#1,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d2
	addq.w	#1,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d0
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d2
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	addq.w	#1,d3
	lea.l	dt_textBM(a5),a0
	CALLLIB	_LVOBltMaskBitMapRastPort

	bra.w	txt_xit

.init	lea.l	dt_shdwBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4		; size x
	rts





tdShadowTypeTransparent
	move.w	#ABC+ABNC+ANBC,d6	; minterm
	movea.l	dt_maskPlane(a5),a2	; maskplane
	move.w	tdi_lineHeight(a3),d5	; size y

	bsr.w	.init
	subq.w	#1,d4
	addq.w	#1,d0
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.w	.init
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.w	.init
	subq.w	#1,d4
	addq.w	#1,d2
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.w	.init
	subq.w	#1,d4
	addq.w	#1,d0
	addq.w	#1,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d2
	addq.w	#1,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d0
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort

	bsr.b	.init
	subq.w	#1,d4
	addq.w	#1,d2
	addq.w	#2,d3
	CALLLIB	_LVOBltMaskBitMapRastPort


	bsr.b	.init
	addq.w	#1,d3
	lea.l	dt_shdwBM(a5),a0
	CALLLIB	_LVOBltMaskBitMapRastPort

	bra.w	txt_xit

.init	lea.l	dt_textBM(a5),a0	; src bm
	movea.l	tdi_dstRPort(a3),a1	; dst rp
	moveq.l	#1,d0			; src x
	moveq.l	#1,d1			; src y
	move.w	tdi_dstXPos(a3),d2	; dst x
	move.w	tdi_dstYPos(a3),d3	; dst y
	move.w	ew_Width(a4),d4		; size x
	rts








;----------------------------------------------------------------------------
; place character data in plane pointed to by _BLTCDPTR
;----------------------------------------------------------------------------

tdBlitCharNormal
	move.w	dt_BLTSIZEW(a5),d6
	beq.b	OneWordMode
	cmpi.w	#1,d6
	beq.b	TwoWordsMode

.BLTLPY	moveq.l	#0,d3			; clearance of old value (shifter A)
	move.w	dt_BLTSIZEW(a5),d6
;------------------------------------------
.BLTLPX	move.l	d3,d2
	move.w	(a3)+,d2

	cmp.w	dt_BLTSIZEW(a5),d6
	bne.b	.NO_FWM
	and.w	dt_BLTAFWM(a5),d2
.NO_FWM	tst.w	d6
	bne.b	.SHIFT
	and.w	dt_BLTALWM(a5),d2

.SHIFT	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+
	dbra	d6,.BLTLPX
;------------------------------------------
	clr.w	d3
	tst.l	d3
	beq.b	.MODULO
	ror.l	d0,d3
	or.w	d3,(a4)

.MODULO	suba.w	d4,a3
	suba.w	d5,a4
	dbra	d1,.BLTLPY
	bra.w	endBlit
;----------------------------------------------------------------------------

OneWordMode
.BLTLPY	moveq.l	#0,d3			; clearance of old value (shifter A)
;------------------------------------------
.BLTLPX	move.l	d3,d2
	move.w	(a3)+,d2
	and.w	dt_BLTAFWM(a5),d2
	and.w	dt_BLTALWM(a5),d2
	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+
;------------------------------------------
	clr.w	d3
	tst.l	d3
	beq.b	.MODULO
	ror.l	d0,d3
	or.w	d3,(a4)

.MODULO	suba.w	d4,a3
	suba.w	d5,a4
	dbra	d1,.BLTLPY
	bra.w	endBlit
;----------------------------------------------------------------------------

TwoWordsMode
.BLTLPY	moveq.l	#0,d3			; clearance of old value (shifter A)
;------------------------------------------
	move.l	d3,d2
	move.w	(a3)+,d2
	and.w	dt_BLTAFWM(a5),d2
	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+

	move.l	d3,d2
	move.w	(a3)+,d2
	and.w	dt_BLTALWM(a5),d2
	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+
;------------------------------------------
	clr.w	d3
	tst.l	d3
	beq.b	.MODULO
	ror.l	d0,d3
	or.w	d3,(a4)

.MODULO	suba.w	d4,a3
	suba.w	d5,a4
	dbra	d1,.BLTLPY
	bra.w	endBlit
;----------------------------------------------------------------------------





tdBlitCharSpecial
	movem.l	d7/a6,-(sp)
	movea.l	dt_editWindow(a5),a6
	movem.l	d0-d1/a3-a4,-(sp)

	moveq.l	#0,d7
.BLTLPY	moveq.l	#0,d3			; clearance of old value (shifter A)
	move.w	dt_BLTSIZEW(a5),d6
;------------------------------------------
.BLTLPX	move.l	d3,d2
	move.w	(a3)+,d2

	cmp.w	dt_BLTSIZEW(a5),d6
	bne.b	.NO_FWM
	and.w	dt_BLTAFWM(a5),d2

.NO_FWM	tst.w	d6
	bne.b	.SHIFT
	and.w	dt_BLTALWM(a5),d2

.SHIFT	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+
	dbra	d6,.BLTLPX
;------------------------------------------
	clr.w	d3
	tst.l	d3
	beq.b	.MODULO
	ror.l	d0,d3
	or.w	d3,(a4)

.MODULO	suba.w	d4,a3
	suba.w	d5,a4

	btst.b	#MFSB_ITALIC,tdc_charStyle+1(a1)
	beq.b	.TSTLP
	btst.b	#FSB_ITALIC,tf_Style(a0)
	bne.b	.TSTLP

	addq.w	#1,d7
	cmp.w	ew_slantAmount(a6),d7
	bne.b	.TSTLP

	moveq.l	#0,d7
	tst.w	ew_slantValue(a6)
	bmi.b	.neg2

.pos2	add.w	ew_slantValue(a6),d0	; shift further
	cmp.w	#16,d0			; when too far
	blt.b	.TSTLP
	sub.w	#16,d0			; then reset
	adda.w	#2,a4			; and take next word
	bra.b	.TSTLP

.neg2	add.w	ew_slantValue(a6),d0	; shift back
	bpl.b	.TSTLP
	add.w	#16,d0			; if too less then reset
	suba.w	#2,a4			; and take previous word

.TSTLP	dbra	d1,.BLTLPY

	movem.l	(sp)+,d0-d1/a3-a4

	btst.b	#MFSB_BOLD,tdc_charStyle+1(a1)
	beq.w	.endblt
	btst.b	#FSB_BOLD,tf_Style(a0)
	bne.w	.endblt

	add.w	tf_BoldSmear(a0),d0	; shift further
	move.w	d0,d7
	andi.w	#$000F,d0
	andi.w	#$00F0,d7
	lsr.w	#3,d7
	adda.w	d7,a4	

	moveq.l	#0,d7
.BLTY02	moveq.l	#0,d3			; clearance of old value (shifter A)
	move.w	dt_BLTSIZEW(a5),d6
;------------------------------------------
.BLTX02	move.l	d3,d2
	move.w	(a3)+,d2

	cmp.w	dt_BLTSIZEW(a5),d6
	bne.b	.NOFWM2
	and.w	dt_BLTAFWM(a5),d2

.NOFWM2	tst.w	d6
	bne.w	.SHIFT2
	and.w	dt_BLTALWM(a5),d2

.SHIFT2	move.l	d2,d3			; store for later fetch
	swap.w	d3
	ror.l	d0,d2			; simulate barrel shifter A
	or.w	d2,(a4)+
	dbra	d6,.BLTX02
;------------------------------------------
	clr.w	d3
	tst.l	d3
	beq.b	.MODUL2
	ror.l	d0,d3
	or.w	d3,(a4)

.MODUL2	suba.w	d4,a3
	suba.w	d5,a4

	btst.b	#MFSB_ITALIC,tdc_charStyle+1(a1)
	beq.b	.TSTLP2
	btst.b	#FSB_ITALIC,tf_Style(a0)
	bne.b	.TSTLP2
	addq.w	#1,d7

	cmp.w	ew_slantAmount(a6),d7
	bne.b	.TSTLP2

	moveq.l	#0,d7
	tst.w	ew_slantValue(a6)
	bmi.b	.neg

.pos	add.w	ew_slantValue(a6),d0	; shift further
	cmp.w	#16,d0			; when too far
	blt.b	.TSTLP2
	sub.w	#16,d0			; then reset
	adda.w	#2,a4			; and take next word
	bra.b	.TSTLP2

.neg	add.w	ew_slantValue(a6),d0	; shift back
	bpl.b	.TSTLP2
	add.w	#16,d0			; if too less then reset
	suba.w	#2,a4			; and take previous word

.TSTLP2	dbra	d1,.BLTY02

.endblt	movem.l	(sp)+,d7/a6
	bra.w	endBlit
;----------------------------------------------------------------------------



teDirectionTable
	dc.w	01,01		; south-east
	dc.w	00,01		; south
	dc.w	-1,01		; south-west
	dc.w	-1,00		;       west
	dc.w	-1,-1		; north-west
	dc.w	00,-1		; north
	dc.w	01,-1		; north-east
	dc.w	01,00		;       east



;----------------------------------------------------------------------------
; creates mask of BitMap (a2) in mask-BitMap
;----------------------------------------------------------------------------

tdCreateMask
	movem.l	d0-d7/a0-a1,-(sp)
	move.l	bm_Planes(a2),-(sp)

	tst.b	ew_antiAliasLevel(a4)
	beq.b	.skip90
	move.b	#~0,dt_planesON(a5)
	move.b	#FALSE,dt_sameColor(a5)

.skip90	move.b	dt_planesON(a5),d5
	tst.b	d5
	beq.w	.zero
	cmp.b	#%00000001,d5
	beq.w	.zero

	moveq.l	#0,d6
	move.b	bm_Depth(a2),d6
	lsl.w	#2,d6

	moveq.l	#0,d7

.skip01	btst.l	#0,d5
	beq.b	.skip00

	movem.w	d5-d7,-(sp)
	movea.l	a2,a0			; SrcBM
	move.l	bm_Planes(a0,d7.w),bm_Planes(a0)
	lea.l	dt_maskBM(a5),a1	; DstBM
	moveq.l	#1,d0			; SrcX
	moveq.l	#1,d1			; SrcY
	moveq.l	#1,d2			; DstX
	moveq.l	#1,d3			; DstY
	move.w	ew_Width(a4),d4		; SizeX
	move.w	tdi_resultHeight(a3),d5	; SizeY
	move.w	#$C0,d6			; Minterm D = A
	moveq.l	#%00000001,d7		; Mask
	CALLLIB	_LVOBltBitMap		; Do the blit
	movem.w	(sp)+,d5-d7
	addq.w	#4,d7
	bra.b	.do_nxt

.skip00	lsr.b	#1,d5
	addq.w	#4,d7
	bra.b	.skip01

.do_nxt	cmp.w	d7,d6
	bls.b	.exit
	cmp.b	#TRUE,dt_sameColor(a5)
	beq.b	.exit

	btst.l	#0,d5
	beq.b	.skip10

	movem.w	d5-d7,-(sp)
	movea.l	a2,a0			; SrcBM
	move.l	bm_Planes(a0,d7.w),bm_Planes(a0)
	lea.l	dt_maskBM(a5),a1	; DstBM
	moveq.l	#1,d0			; SrcX
	moveq.l	#1,d1			; SrcY
	move.w	tdi_resultHeight(a3),d5	; SizeY
	move.w	#$EA,d6			; Minterm D = ??
	moveq.l	#%00000001,d7		; Mask
	CALLLIB	_LVOBltBitMap		; Do the blit
	movem.w	(sp)+,d5-d7

.skip10	lsr.b	#1,d5
	addq.w	#4,d7
	bra.b	.do_nxt

.exit	move.l	(sp)+,bm_Planes(a2)
	movem.l	(sp)+,d0-d7/a0-a1
	rts


.zero	movea.l	a2,a0
	lea.l	dt_maskBM(a5),a1
	moveq.l	#1,d0			; SrcX
	moveq.l	#1,d1			; SrcY
	moveq.l	#1,d2			; DstX
	moveq.l	#1,d3			; DstY
	move.w	ew_Width(a4),d4		; SizeX
	move.w	tdi_resultHeight(a3),d5	; SizeY
	move.w	#$C0,d6			; Minterm D = A
	moveq.l	#%00000001,d7		; Mask
	CALLLIB	_LVOBltBitMap		; Do the blit
	bra.b	.exit



; tdGetLineInfo( (WORD) renderLine (d0), (APTR) TDInfo (a3),
;	(APTR) EditWindow (a4), (APTR) stack (a5), (APTR) GfxBase (a6) )
; returns:
;	(APTR) firstChar (a1), (WORD) nextLineOffset (d3)
;	d1 - thrashed

tdGetLineInfo
	movea.l	tdi_textData(a3),a1
	moveq.l	#0,d3		; character count offset
	moveq.l	#0,d1		; counter for current line
	clr.w	tdi_resultHeight(a3)

.nxtlne	move.w	ew_Width(a4),d3
	sub.w	ew_LeftMargin(a4),d3
	sub.w	ew_RightMargin(a4),d3

	bsr.w	tdCalcFitChars		;(d3 set)
	bsr.w	tdCalcLineWidth
	bsr.w	tdCalcLineHeight

	tst.w	d3
	beq.b	.exit

	move.w	tdi_lineHeight(a3),tdi_resultHeight(a3)
	move.w	d0,-(sp)
	bsr.w	tdExtraSpace
	add.w	ew_ySpacing(a4),d0
	add.w	d0,tdi_resultHeight(a3)
	move.w	(sp)+,d0

	cmp.w	d1,d0
	beq.b	.exit

	addq.w	#1,d1
	adda.w	d3,a1
	bra.b	.nxtlne

.exit	rts




; VOID tdCalcLineHeight( (APTR) textChar (a1), (APTR) TEInfo (a3),
;	(UWORD) end_of_line_offset (d3) )
; calculates height of line

tdCalcLineHeight
	movem.l	d0/d2/a1-a2,-(sp)

	moveq.l	#0,d2			; start at offset zero

	clr.w	tdi_lineHeight(a3)
	clr.w	tdi_baseLine(a3)

	tst.b	tdc_charCode(a1)
	beq.b	.exit2
	cmpi.b	#LF,tdc_charCode(a1)
	beq.b	.exitlf

.loop00	cmp.w	d2,d3
	bls.b	.exit

	cmpi.b	#31,tdc_charCode(a1,d2.w)
	bls.b	.next

	movea.l	tdc_charFont(a1,d2.w),a2
.chk_hi	move.w	tf_Baseline(a2),d0
	cmp.w	tdi_baseLine(a3),d0
	bls.b	.chk_lo
	move.w	d0,tdi_baseLine(a3)

.chk_lo	move.w	tf_YSize(a2),d0
	sub.w	tf_Baseline(a2),d0
	cmp.w	tdi_lineHeight(a3),d0
	bls.b	.next
	move.w	d0,tdi_lineHeight(a3)

.next	addq.w	#tdc_SIZE,d2
	bra.b	.loop00

.exit	move.w	tdi_baseLine(a3),d0
	add.w	d0,tdi_lineHeight(a3)
	beq.b	.empty				; if no printable scan backw.
.exit2	movem.l	(sp)+,d0/d2/a1-a2
	rts

.empty	subq.w	#tdc_SIZE,d2
	ble.b	.exit2
	cmpi.b	#31,tdc_charCode(a1,d2.w)
	bls.b	.empty
	movea.l	tdc_charFont(a1,d2.w),a2
	move.w	tf_YSize(a2),tdi_lineHeight(a3)
	move.w	tf_Baseline(a2),tdi_baseLine(a3)
	bra.b	.exit2

.exitlf	movea.l	tdc_charFont(a1),a2
	move.w	tf_YSize(a2),d0
	move.w	d0,tdi_lineHeight(a3)
	move.w	tf_Baseline(a2),tdi_baseLine(a3)
	bra.b	.exit2






; UWORD (d3) = tdCalcFitChars( (APTR) textChar (a1), (APTR) TEInfo (a3),
;	pxSpace (d3), (APTR) EditWindow (a4)
; calculates offset of chars fitting in 'space' pixels, start at 'position'.

tdCalcFitChars
	movem.l	d0-d1/d4/d6/a1,-(sp)

	moveq.l	#-1,d4			; last space found
	moveq.l	#0,d0			; character counter

.loop00	move.b	tdc_charCode(a1),d6
	beq.b	.exit
	cmp.b	#' ',d6
	bne.b	.skip00
	move.w	d0,d4
.skip00	cmp.b	#LF,d6			; Linefeed ?
	beq.b	.exitlf
	bsr.w	tdCharWidth
	sub.w	d1,d3
	bmi.b	.tstspc
	add.w	d1,tdi_resultWidth(a3)
	move.w	ew_xSpacing(a4),d1
	sub.w	d1,d3
	beq.b	.tstspc
	bmi.b	.tstspc
	add.w	d1,tdi_resultWidth(a3)
	adda.w	#tdc_SIZE,a1
	addq.w	#tdc_SIZE,d0
	bra.w	.loop00

.tstspc	tst.w	d4			; is there a space found ?
	bmi.b	.exit			; if not, we truncate the word
	move.w	d4,d0			; last character is space
.exitlf	addq.w	#tdc_SIZE,d0
.exit	move.w	d0,d3
	movem.l	(sp)+,d0-d1/d4/d6/a1
	rts




; VOID tdCalcLineWidth( (APTR) TDInfo (a3), (start) A1 (length) d3 )

tdCalcLineWidth
	movem.l	d1/d2/d4/d5/a1,-(sp)

	moveq.l	#0,d4				; all spaces (hehe)
	moveq.l	#0,d5				; last space offset
	clr.w	tdi_resultWidth(a3)

	cmpi.b	#LF,tdc_charCode(a1)
	beq.b	.skip10

	moveq.l	#0,d2				; length counter

.skip04	cmp.w	d2,d3
	bls.b	.skip09
	cmpi.b	#32,tdc_charCode(a1)
	sls.b	d4
	bhi.b	.skip05
	move.w	tdi_resultWidth(a3),d5
.skip05	bsr.w	tdCharWidth
	add.w	d1,tdi_resultWidth(a3)
	addq.w	#tdc_SIZE,d2
	adda.w	#tdc_SIZE,a1
	cmp.w	d2,d3
	beq.b	.skip09
	move.w	ew_xSpacing(a4),d1
	add.w	d1,tdi_resultWidth(a3)
	bra.b	.skip04

.skip09	tst.b	d4
	beq.b	.skip10
	move.w	d5,tdi_resultWidth(a3)
.skip10	movem.l	(sp)+,d1/d2/d4/d5/a1
	rts




; UWORD (d0) = tdExtraSpace( (APTR) EditWindow (a4) )
; calculates if extra vertical space is needed for the lines. (shadow)

tdExtraSpace

	movem.l	d1/d2/a0,-(sp)

	moveq.l	#0,d0

	cmpi.b	#SHADOWTYPE_NORMAL,ew_shadowType(a4)
	beq.b	.exit

	cmpi.b	#SHADOWTYPE_CAST,ew_shadowType(a4)
	beq.b	.shdw01
	cmpi.b	#SHADOWTYPE_SOLID,ew_shadowType(a4)
	beq.b	.shdw01

	cmpi.b	#SHADOWTYPE_OUTLINE,ew_shadowType(a4)
	beq.b	.shdw00
	cmpi.b	#SHADOWTYPE_TRANSPARENT,ew_shadowType(a4)
	beq.b	.shdw00
	bra.b	.exit

.shdw00	addq.w	#2,d0
	bra.b	.exit

.shdw01	moveq.l	#1,d2
	moveq.l	#0,d1
	lea.l	teDirectionTable(pc),a0
	move.b	ew_shadowDirection(a4),d1
	add.b	ew_shadowDepth(a4),d2
	lsl.w	#2,d1
	tst.w	2(a0,d1.w)		; only horizontal ?
	beq.b	.exit			; if so, no extra space needed

	add.w	d2,d0

.exit	movem.l	(sp)+,d1/d2/a0
	rts






; UWORD (d1) = tdCharWidth( struct TDChar * (a1) )
; calculates width of specified character

tdCharWidth
	movem.l	d3-d5/a0/a2,-(sp)
	moveq.l	#0,d1
	cmp.b	#31,tdc_charCode(a1)
	bls.b	.exit
	movea.l	tdc_charFont(a1),a2
	btst.b	#FPB_PROPORTIONAL,tf_Flags(a2)
	beq.b	.nomnal

.propor	moveq.l	#0,d3
	move.b	tdc_charCode(a1),d3
	move.b	tf_LoChar(a2),d4
	move.b	tf_HiChar(a2),d5
	cmp.b	d3,d4			; if LoChar > char
	bhi.b	.otble1
	cmp.b	d5,d3			; if char > HiChar
	bhi.b	.otble1
.itble1	sub.b	d4,d3			; char -= LoChar
	bra.b	.ofsdne
.otble1	sub.b	d4,d5
	addq.b	#1,d5
	move.b	d5,d3

.ofsdne	lsl.w	#1,d3
	movea.l	tf_CharKern(a2),a0
	cmpa.w	#0,a0
	beq.b	.skip00
	add.w	(a0,d3.w),d1		; increase horizontal destx
.skip00	movea.l	tf_CharSpace(a2),a0
	cmpa.w	#0,a0
	bne.b	.skip01
	add.w	tf_XSize(a2),d1
	bra.b	.tstbld
.skip01	add.w	(a0,d3.w),d1

.tstbld	btst.b	#MFSB_BOLD,tdc_charStyle+1(a1)
	beq.b	.exit
	btst.b	#FSB_BOLD,tf_Style(a2)
	bne.b	.exit
	add.w	tf_BoldSmear(a2),d1
	bra.b	.exit

.nomnal	add.w	tf_XSize(a2),d1

.exit	movem.l	(sp)+,d3-d5/a0/a2
	rts



;---- END OF FILE ----------------------------------------------------------
